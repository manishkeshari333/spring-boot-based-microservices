package com.spring.cloud.auth.management.controller;

import java.util.HashMap;
import java.util.List;
import java.util.stream.Collectors;

import org.springframework.http.HttpStatus;
import org.springframework.http.ResponseEntity;
import org.springframework.security.authentication.AuthenticationManager;
import org.springframework.security.authentication.UsernamePasswordAuthenticationToken;
import org.springframework.security.core.Authentication;
import org.springframework.security.core.AuthenticationException;
import org.springframework.security.core.context.SecurityContextHolder;
import org.springframework.security.core.userdetails.UserDetails;
import org.springframework.web.bind.annotation.GetMapping;
import org.springframework.web.bind.annotation.PathVariable;
import org.springframework.web.bind.annotation.PostMapping;
import org.springframework.web.bind.annotation.RequestBody;
import org.springframework.web.bind.annotation.RequestMapping;
import org.springframework.web.bind.annotation.RestController;

import com.spring.cloud.auth.management.dto.LoginRequest;
import com.spring.cloud.auth.management.dto.LoginResponse;
import com.spring.cloud.auth.management.entity.User;
import com.spring.cloud.auth.management.services.AuthService;
import com.spring.cloud.auth.management.util.JwtUtils;

import lombok.extern.slf4j.Slf4j;
import reactor.core.publisher.Mono;

@RestController
@RequestMapping("/api/v1/authmang")
@Slf4j
public class AuthController {

	private final AuthenticationManager authenticationManager;
	private final JwtUtils jwtUtils;
	private final AuthService service;

	public AuthController(AuthenticationManager authenticationManager, JwtUtils jwtUtils, AuthService service) {
		this.authenticationManager = authenticationManager;
		this.jwtUtils = jwtUtils;
		this.service = service;
	}

	@PostMapping("/signup")
	public User registerUser(@RequestBody LoginRequest request) {
		return service.registerUser(request);
	}

	@PostMapping("/signin")
	public ResponseEntity<?> authenticateUser(@RequestBody LoginRequest request) {
		Authentication authentication;
		try {
			authentication = authenticationManager.authenticate(
					new UsernamePasswordAuthenticationToken(request.getUserName(), request.getPassWord()));
		} catch (AuthenticationException exception) {
			HashMap<String, Object> map = new HashMap<>();
			map.put("Message", "Bad Credentials");
			map.put("Status", false);
			return new ResponseEntity<Object>(map, HttpStatus.NOT_FOUND);
		}

		SecurityContextHolder.getContext().setAuthentication(authentication);

		UserDetails userDetails = (UserDetails) authentication.getPrincipal();

		String jwtToken = jwtUtils.generateTokenFromUsername(userDetails);

		List<String> roles = userDetails.getAuthorities().stream().map(item -> item.getAuthority())
				.collect(Collectors.toList());

		LoginResponse loginResponse = new LoginResponse();
		loginResponse.setJwtToken(jwtToken);
		loginResponse.setUserName(userDetails.getUsername());
		loginResponse.setRoles(roles.stream().collect(Collectors.toSet()));
		return ResponseEntity.ok(loginResponse);
	}

//	@GetMapping("/validate-token/{token}")
//	public boolean validateToken(@PathVariable String token) {
//		return jwtUtils.validateJwtToken(token);
//	}
	@GetMapping("/validate-token/{token}")
	public Mono<Boolean> validateToken(@PathVariable String token) {
	    return validateToken(token)
	            .doOnError(error -> log.error("Error validating token: {}", error.getMessage())) // Log the error
	            .onErrorReturn(false);
	}
}
